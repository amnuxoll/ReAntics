Test Plan Document


System Test 1:
    Test 1 will check to make sure system execution is viable via the command line. A tester will simply execute the command “python Game.py” on the OS command line, i.e. terminal for Mac and CMD for Windows. A passing result will show a user interface. A failing result will end in no user interface or a console command error.

System Test 2:
    Test 2 will check to make sure the system can properly close without crashing or emitting an exit code other than 0. A tester will simply execute the command “python Game.py” on the OS command line to open the game system. Then a tester will click the red close “x” in the top right or left corner depending on the computer's OS. This can also be done on the command line by using the hotkey Ctrl-c. If the system is operating correctly on close the command line will show nothing or a keyboardInterrupt

System Test 3:
    Test 3 will check to make sure that the move timeout system that catches infinite loops or limits an AI to a certain time limit can be correctly used. A tester will need to start the game for normal operation and queue up a Two Player game with Random versus "Booger Test Timeout" with 10 games. Then proceed to start and observe the command-line for a traceback printed on the second game. This will cause "Booger Test Timeout" to immediately lose and the Random agent to collect at least one game.
        
System Test 4:
    Test 4 will be a recurrence test of the existing unit tests in the "Unit Test" directory. To run this system test you must have the latest version of python 3.6 installed on the running computer. Change directories into the "Unit Test" folder and execute the commands: "python testAIutils.py", "python testGame.py", "python testGamePane.py", "python testSettings", and "python testStatsPane". Each of these tests should be a resulting “OK” from the terminal.

System Test 5:
    Test 5 will be a an Error Handling Stress Test which assures that invalid placements of grass, food, constructions, and buildings and invalid movement moves will cause an error message to be printed. The game will not stop, but instead the opponent to the AI designated as the ErrorHandlingStressTest agent will win the current game. To run this system test the user will execute "python Game.py" and setup a Quickstart game with the "ErrorHandlingStressTest" and "Random" agents selected. Set the number of Games section to 3000 and start the game. The result should be 3000 games played to completion with the "Random" agent winning all of them and error messages after each game.